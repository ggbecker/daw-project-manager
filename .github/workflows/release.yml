# .github/workflows/release.yaml

name: Flutter CI/CD (Windows & macOS)

# 1. Gatilhos do Workflow
on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' 

# CORRIGIDO: Versão do Flutter atualizada para garantir um Dart SDK 3.9.2+
env:
  FLUTTER_VERSION: 3.24.x 

jobs:
  # Job de Teste de Integração (para Pull Requests)
  test_pr_build:
    name: Test PR Build (Windows)
    if: github.event_name == 'pull_request'
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      # ESTA É A AÇÃO QUE VOCÊ PERGUNTOU: subosito/flutter-action@v2
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Get dependencies
        run: flutter pub get

      - name: Run Build Test (Windows)
        run: flutter build windows --release

  # Job de Release (para Tags)
  release:
    name: Build and Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v4

      # ESTA É A AÇÃO QUE VOCÊ PERGUNTOU: subosito/flutter-action@v2
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      # --- Build Steps ---
      - name: Build Windows Executable
        if: runner.os == 'Windows'
        run: flutter build windows --release
      
      - name: Build macOS Executable
        if: runner.os == 'macOS'
        run: flutter build macos --release
      
      # --- Empacotamento para macOS ---
      - name: Zip macOS App Bundle
        if: runner.os == 'macOS'
        run: |
          cd build/macos/Build/Products/Release
          zip -r DAW_Project_Manager-${{ github.ref_name }}.zip daw_project_manager.app
          
      # ----------------------------------------------------
      # Configuração do Release no GitHub
      # ----------------------------------------------------

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Anexar Artefato do Windows
      - name: Upload Windows Release Asset
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/windows/x64/runner/Release/daw_project_manager.exe
          asset_name: DAW_Project_Manager_Windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      # Anexar Artefato do macOS
      - name: Upload macOS Release Asset
        if: runner.os == 'macOS'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/macos/Build/Products/Release/DAW_Project_Manager-${{ github.ref_name }}.zip
          asset_name: DAW_Project_Manager_macOS.zip
          asset_content_type: application/zip