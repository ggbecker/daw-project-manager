# .github/workflows/release.yaml

name: Flutter CI/CD (Windows & macOS)

# PERMISSÃO ADICIONADA: Concede permissão de escrita ao GITHUB_TOKEN para contents (incluindo Releases)
permissions:
  contents: write 

# 1. Gatilhos do Workflow
on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' 

# Variáveis para Setup
env:
  DART_SDK_VERSION: 3.9.x 
  FLUTTER_BASE_VERSION: 3.24.x 

# 2. Jobs
jobs:
  # Job de Teste de Integração (para Pull Requests)
  test_pr_build:
    name: Test PR Build (Windows)
    if: github.event_name == 'pull_request'
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Dart SDK ${{ env.DART_SDK_VERSION }}
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_SDK_VERSION }}

      - name: Setup Flutter ${{ env.FLUTTER_BASE_VERSION }} (stable)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_BASE_VERSION }}
          channel: 'stable' 

      - name: Run Flutter Upgrade
        run: flutter upgrade

      - name: Get dependencies & Build Test
        run: |
          flutter pub get
          flutter build windows --release


  # Job de Release para macOS (Cria o Release e anexa o arquivo macOS)
  release_macos:
    name: Build and Create Release (macOS)
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest
    
    # NOVO: Define o output para a URL de upload que será usada pelo job de Windows
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Dart SDK ${{ env.DART_SDK_VERSION }}
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_SDK_VERSION }}

      - name: Setup Flutter ${{ env.FLUTTER_BASE_VERSION }} (stable)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_BASE_VERSION }}
          channel: 'stable'

      - name: Run Flutter Upgrade
        run: flutter upgrade

      - name: Get dependencies
        run: flutter pub get

      - name: Build macOS Executable
        run: flutter build macos --release
      
      - name: Zip macOS App Bundle
        run: |
          cd build/macos/Build/Products/Release
          zip -r DAW_Project_Manager-${{ github.ref_name }}.zip daw_project_manager.app
          
      # PASSO RECUPERADO: Criação do Release (Agora com permissão de escrita)
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Anexar Artefato do macOS
      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/macos/Build/Products/Release/DAW_Project_Manager-${{ github.ref_name }}.zip
          asset_name: DAW_Project_Manager_macOS.zip
          asset_content_type: application/zip

  # Job de Release para Windows (Anexa o arquivo Windows ao Release criado)
  release_windows:
    name: Build and Upload (Windows)
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest
    
    # Depende do job de macOS para obter a URL de upload
    needs: [release_macos] 
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Dart SDK ${{ env.DART_SDK_VERSION }}
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_SDK_VERSION }}

      - name: Setup Flutter ${{ env.FLUTTER_BASE_VERSION }} (stable)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_BASE_VERSION }}
          channel: 'stable'

      - name: Run Flutter Upgrade
        run: flutter upgrade

      - name: Get dependencies
        run: flutter pub get

      - name: Build Windows Executable
        run: flutter build windows --release
      
      # Anexar Artefato do Windows (usando a URL de upload do job anterior)
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # A URL é obtida do output do job 'release_macos'
          upload_url: ${{ needs.release_macos.outputs.release_upload_url }}
          asset_path: build/windows/x64/runner/Release/daw_project_manager.exe
          asset_name: DAW_Project_Manager_Windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable